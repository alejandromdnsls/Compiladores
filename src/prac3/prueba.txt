[
[['0', '1', '2', '3', '5', '8'], 'a', ['6', '7', '10']],
[['0', '1', '2', '3', '5', '8'], 'b', ['4', '3', '5', '9', '10']],
[['6', '7', '10'], 'a', ['11']],
[['6', '7', '10'], 'b', []],
[['4', '3', '5', '9', '10'], 'a', ['6', '7', '10', '11']],
[['4', '3', '5', '9', '10'], 'b', ['4', '3', '5']],
[['11'], 'a', []],
[['11'], 'b', []],
[[], 'a', []],
[[], 'b', []],
[['6', '7', '10', '11'], 'a', ['11']],
[['6', '7', '10', '11'], 'b', []],
[['4', '3', '5'], 'a', ['6', '7', '10']],
[['4', '3', '5'], 'b', ['4', '3', '5']],
[[], 'a', []],
[[], 'b', []]
]

[['0', '1', '2', '3', '5', '8'],
['6', '7', '10'],
['4', '3', '5', '9', '10'],
['11'],
[],
['6', '7', '10', '11'],
['4', '3', '5'],
[],
[],
[],
[],
['11'],
[],
['6', '7', '10'],
['4', '3', '5'],
[],
[]
]

i = 1
[
[['0', '1', '2', '3', '5', '8'], 'a', ['6', '7', '10']],
[['0', '1', '2', '3', '5', '8'], 'b', ['4', '3', '5', '9', '10']],
[['6', '7', '10'], 'a', ['11']],
[['6', '7', '10'], 'b', []],
[['4', '3', '5', '9', '10'], 'a', ['6', '7', '10', '11']],
[['4', '3', '5', '9', '10'], 'b', ['4', '3', '5']],
[['11'], 'a', []],
[['11'], 'b', []],
[['6', '7', '10', '11'], 'a', ['11']],
[['6', '7', '10', '11'], 'b', []]]

[
['0', '1', '2', '3', '5', '8'],
['6', '7', '10'],
['4', '3', '5', '9', '10'],
['11'],
['6', '7', '10', '11'],
['4', '3', '5'],
['11']
]

i = 0

[
[['0', '1', '2', '3', '5', '8'], 'a', ['6', '7', '10']],
[['0', '1', '2', '3', '5', '8'], 'b', ['4', '3', '5', '9', '10']],
[['6', '7', '10'], 'a', ['11']],
[['6', '7', '10'], 'b', []],
[['4', '3', '5', '9', '10'], 'a', ['6', '7', '10', '11']],
[['4', '3', '5', '9', '10'], 'b', ['4', '3', '5']],
[['11'], 'a', []],
[['11'], 'b', []],
[['6', '7', '10', '11'], 'a', ['11']],
[['6', '7', '10', '11'], 'b', []],
[['4', '3', '5'], 'a', ['6', '7', '10']],
[['4', '3', '5'], 'b', ['4', '3', '5']]
]

[
['0', '1', '2', '3', '5', '8'],
['6', '7', '10'],
['4', '3', '5', '9', '10'],
['11'],
['6', '7', '10', '11'],
['4', '3', '5'],
['11'],
['6', '7', '10'],
['4', '3', '5']
]

['0', '1', '2', '3', '5', '8']

arith
unsigned
datos in bus 7
pc_out out bus 7
clk, clr, up, wpc

type banco is arrary 0 to 7 of std_logic_vecto (7 down to 0)
signal aux:banco
signal sp1: integer range 0 to 7
begin
  process(clk, clr)
  begin
    if (clr = '1') then
      fir i in 0 to 7 loop
        aux(i) <= "00000000"
      end loop;
    elsif(clk'event and clk = '1') then
      if(up ='1' and wpc = '1') then --call
        sp := sp +1;
        aux(sp) <= datos;
      else
        aux(sp) <= aux(sp) + 1; --secuencia
      endif
    end if;
    sp1 <= sp1;
  end process;
  stack <= sp1;
  pc_out <= aux(sp1);

testebench
clr <= '1'
wait for 40 ns;
clr <= '0'
wait for 70 ns;
up <= '1';
wpc <=  '1'
datos <= "10101010"

hacer RET, Branch condicional e incondicional
